{
  "name": "node-authorize-net",
  "version": "0.0.1",
  "description": "nodejs sdk to communicate with authorize.net payement gateway",
  "main": "index.js",
  "scripts": {
    "test": "NODE_ENV='test' node ./node_modules/.bin/mocha -R spec -t 35000"
  },
  "keywords": [
    "authorize.net",
    "payement",
    "gateway"
  ],
  "author": {
    "name": "laurent34azerty@gmail.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/continuous-software/node-authorize-net.git"
  },
  "dependencies": {
    "bluebird": "^2.3.2",
    "json2xml": "^0.1.1",
    "lodash": "^2.4.1",
    "request": "^2.40.0",
    "xml2json": "^0.5.1"
  },
  "devDependencies": {
    "gulp": "^3.8.7",
    "gulp-concat": "^2.3.5",
    "jsdox": "^0.4.2",
    "mocha": "^1.21.4"
  },
  "readme": "[![build status](https://travis-ci.org/continuous-software/node-authorize-net.svg?branch=master)](https://travis-ci.org/continuous-software/node-authorize-net)\n\n# node-authorize-net\n\na nodejs sdk to communicate with [authorize.net](http://www.authorize.net/) payment gateway.\n\n## installation\n\n`npm install node-authorize-net`\n\n## test\n\n`npm test`\n\n## usage\n\n1. create a service by passing your apiLogin and your transaction key\n2. You can then call any method listed on the api. These methods return Promises. See API documentation for further details\n\n```javascript\n    var service=require('node-authorize-net')(apiloging,key);\n\n    service.authCaptureTransaction(amount, cardNumber, expirationYear, expirationMonth).then(function (transaction) {\n        \n        //process the response\n        \n        assert.equal(transaction.transactionResponse.responseCode, '1');\n    });\n```\n\n## api\n\n###Global\n\n\n\n\n\n---\n\n### AuthorizeNet\n\n\n\n#### authCaptureTransaction(amount, cardNumber, expirationYear, expirationMonth, other) \n\n<p> submit a transaction request type authCaptureTransaction. </p>\n<ul>\n <li>will resolve with an json object representing the <em>createTransactionResponse</em> xml field of the web service response it the resultCode is <code>\"Ok\"</code></li>\n <li>will reject with an instance of AuthorizationNetError whose properties will be json version of the xml field <em>createTransactionResponse</em> if the resultCode is not <code>\"Ok\"</code></li>\n <li>will reject with an instance of HttpError if the http status code of the response is higher or equal to 400</li>\n <li>will reject with an instance of AssertionError if one of the mandatory field is falsy</li>\n <li>will reject with an instance of Error if any other error occurs (parsing, etc)</li>\n</ul>\n\n**Parameters**\n\n**amount**: string | number, the amount of the transaction\n\n**cardNumber**: string | number, the card number used for the transaction\n\n**expirationYear**: string | number, a four digits number for the expiration year of the card\n\n**expirationMonth**: string | number, one or two digit for the expiration month of the card\n\n**other**: object, a json object you want to mix with the transactionRequest field before transformation into xml. Note it will override already assigned properties\n\n**Returns**: Promise, \n#### authOnlyTransaction(amount, cardNumber, expirationYear, expirationMonth, other) \n\n<p> submit a transaction request type authOnlyTransaction. </p>\n <ul>\n <li>will resolve with an json object representing the <em>createTransactionResponse</em> xml field of the web service response it the resultCode is <code>\"Ok\"</code></li>\n <li>will reject with an instance of AuthorizationNetError whose properties will be json version of the xml field <em>createTransactionResponse</em> if the resultCode is not <code>\"Ok\"</code></li>\n <li>will reject with an instance of HttpError if the http status code of the response is higher or equal to 400</li>\n <li>will reject with an instance of AssertionError if one of the mandatory field is falsy</li>\n <li>will reject with an instance of Error if any other error occurs (parsing, etc)</li>\n</ul>\n\n**Parameters**\n\n**amount**: number, the amount of the transaction\n\n**cardNumber**: string | number, the card number used for the transaction\n\n**expirationYear**: number, a four digits number for the expiration year of the card\n\n**expirationMonth**: one or two digit for the expiration month of the card\n\n**other**: object, a json object you want to mix with the transactionRequest field before transformation into xml. Note it will override already assigned properties\n\n**Returns**: Promise, \n#### priorAuthCaptureTransaction(refTransId, amount, other) \n\n<p> submit a transaction request type priorAuthCaptureTransaction. </p>\n <ul>\n <li>will resolve with an json object representing the <em>createTransactionResponse</em> xml field of the web service response it the resultCode is <code>\"Ok\"</code></li>\n <li>will reject with an instance of AuthorizationNetError whose properties will be json version of the xml field <em>createTransactionResponse</em> if the resultCode is not <code>\"Ok\"</code></li>\n <li>will reject with an instance of HttpError if the http status code of the response is higher or equal to 400</li>\n <li>will reject with an instance of AssertionError if one of the mandatory field is falsy</li>\n <li>will reject with an instance of Error if any other error occurs (parsing, etc)</li>\n</ul>\n\n**Parameters**\n\n**refTransId**: String | number, the transaction reference id returned by the web service after the related authorize only transaction\n\n**amount**: number, the amount of the transaction\n\n**other**: object, a json object you want to mix with the transactionRequest field before transformation into xml. Note it will override already assigned properties\n\n**Returns**: Promise, \n#### voidTransaction(refTransId, other) \n\n<p> submit a transaction request type voidTransaction. </p>\n <ul>\n <li>will resolve with an json object representing the <em>createTransactionResponse</em> xml field of the web service response it the resultCode is <code>\"Ok\"</code></li>\n <li>will reject with an instance of AuthorizationNetError whose properties will be json version of the xml field <em>createTransactionResponse</em> if the resultCode is not <code>\"Ok\"</code></li>\n <li>will reject with an instance of HttpError if the http status code of the response is higher or equal to 400</li>\n <li>will reject with an instance of AssertionError if one of the mandatory field is falsy</li>\n <li>will reject with an instance of Error if any other error occurs (parsing, etc)</li>\n</ul>\n\n**Parameters**\n\n**refTransId**: String | number, the transaction reference id (you want to void) returned by the web service.\n\n**other**: object, a json object you want to mix with the transactionRequest field before transformation into xml. Note it will override already assigned properties\n\n**Returns**: Promise, \n#### getTransactionDetails(refTransId) \n\n<p> submit a getTransactionDetails request </p>\n <ul>\n <li>will resolve with an json object representing the <em>getTransactionDetailResponse</em> xml field of the web service response it the resultCode is <code>\"Ok\"</code></li>\n <li>will reject with an instance of AuthorizationNetError whose properties will be json version of the xml field <em>createTransactionResponse</em> if the resultCode is not <code>\"Ok\"</code></li>\n <li>will reject with an instance of HttpError if the http status code of the response is higher or equal to 400</li>\n <li>will reject with an instance of AssertionError if one of the mandatory field is falsy</li>\n <li>will reject with an instance of Error if any other error occurs (parsing, etc)</li>\n</ul>\n\n**Parameters**\n\n**refTransId**: String | number, the transaction reference id (you want to void) returned by the web service.\n\n**Returns**: Promise, \n#### getUnsettledTransactionList() \n\n<p> submit a getTransactionDetails request </p>\n <ul>\n <li>will resolve with an json object representing the <em>getUnsettledTransactionListResponse</em> xml field of the web service response it the resultCode is <code>\"Ok\"</code></li>\n <li>will reject with an instance of AuthorizationNetError whose properties will be json version of the xml field <em>createTransactionResponse</em> if the resultCode is not <code>\"Ok\"</code></li>\n <li>will reject with an instance of HttpError if the http status code of the response is higher or equal to 400</li>\n <li>will reject with an instance of AssertionError if one of the mandatory field is falsy</li>\n <li>will reject with an instance of Error if any other error occurs (parsing, etc)</li>\n</ul>\n\n**Returns**: Promise, \n#### getSettledBatchList(withStats, startDate, lastDate) \n\n<p> get a batch list of already settled transactions </p>\n <ul>\n <li>will resolve with an json object representing the <em>getBatchListResponse</em> xml field of the web service response it the resultCode is <code>\"Ok\"</code></li>\n <li>will reject with an instance of AuthorizationNetError whose properties will be json version of the xml field <em>createTransactionResponse</em> if the resultCode is not <code>\"Ok\"</code></li>\n <li>will reject with an instance of HttpError if the http status code of the response is higher or equal to 400</li>\n <li>will reject with an instance of AssertionError if one of the mandatory field is falsy</li>\n <li>will reject with an instance of Error if any other error occurs (parsing, etc)</li>\n</ul>\n\n**Parameters**\n\n**withStats**: boolean, if true the response will include detailed view of the statistics\n\n**startDate**: Date, a date object to define the lower bound of the time window requested\n\n**lastDate**: Date, a date object to define the higher bound of the time window requested\n\n**Returns**: Promise, \n#### getBatchStatistics(batchId) \n\n<p> get statistics for a particular batch </p>\n <ul>\n <li>will resolve with an json object representing the <em>getBatchStatisticsResponse</em> xml field of the web service response it the resultCode is <code>\"Ok\"</code></li>\n <li>will reject with an instance of AuthorizationNetError whose properties will be json version of the xml field <em>createTransactionResponse</em> if the resultCode is not <code>\"Ok\"</code></li>\n <li>will reject with an instance of HttpError if the http status code of the response is higher or equal to 400</li>\n <li>will reject with an instance of AssertionError if one of the mandatory field is falsy</li>\n <li>will reject with an instance of Error if any other error occurs (parsing, etc)</li>\n</ul>\n\n**Parameters**\n\n**batchId**: string | number, the batch id requested\n\n**Returns**: Promise, \n\n\n---\n\n\n\n\n\n\n\n\n\n## License\n\nnode-authorize-net module is under MIT license:\n\n> Copyright (C) 2014 Laurent Renard.\n>\n> Permission is hereby granted, free of charge, to any person\n> obtaining a copy of this software and associated documentation files\n> (the \"Software\"), to deal in the Software without restriction,\n> including without limitation the rights to use, copy, modify, merge,\n> publish, distribute, sublicense, and/or sell copies of the Software,\n> and to permit persons to whom the Software is furnished to do so,\n> subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be\n> included in all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n> EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n> MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n> NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n> BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n> ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n> CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n> SOFTWARE.\n\n",
  "readmeFilename": "readme.md",
  "gitHead": "4d48074804ce5ec80e5cbc1149c6c030de756394",
  "bugs": {
    "url": "https://github.com/continuous-software/node-authorize-net/issues"
  },
  "homepage": "https://github.com/continuous-software/node-authorize-net",
  "_id": "node-authorize-net@0.0.1",
  "_shasum": "b57fb431c8b77f4733c35815ac437b8b327994cc",
  "_from": "node-authorize-net@"
}
